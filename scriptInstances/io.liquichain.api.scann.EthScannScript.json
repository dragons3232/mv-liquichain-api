{
  "code" : "io.liquichain.api.scann.EthScannScript",
  "description" : "etherscan service",
  "inputs" : [ {
    "name" : "module",
    "type" : "String"
  }, {
    "name" : "action",
    "type" : "String"
  }, {
    "name" : "address",
    "type" : "String"
  }, {
    "name" : "tag",
    "type" : "String"
  }, {
    "name" : "apikey",
    "type" : "String"
  }, {
    "name" : "offset",
    "type" : "int"
  }, {
    "name" : "limit",
    "type" : "int"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.scann;\r\n\r\n\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\nimport java.util.List;\r\nimport java.util.Comparator;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\n\r\npublic class EthScannScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(EthScannScript.class);\r\n  \r\n    public static boolean isJSONValid(String jsonInString ) {\r\n      try {\r\n         final ObjectMapper mapper = new ObjectMapper();\r\n         mapper.readTree(jsonInString);\r\n         return true;\r\n      } catch (Exception e) {\r\n         return false;\r\n      }\r\n    }\r\n\r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private String result;\r\n  \r\n    private String module;\r\n\t  private String action;\r\n\t  private String address;\r\n    private String tag;\r\n    private String apikey;\r\n    private int offset;\r\n    private int limit=10;\r\n\r\n  \r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n  \r\n    public void setModule(String module){\r\n      this.module = module;\r\n    }\r\n    \r\n    public void setAction(String action){\r\n      this.action = action;\r\n    }\r\n    \r\n    public void setAddress(String address){\r\n      this.address = address;\r\n    }\r\n    \r\n    public void setTag(String tag){\r\n      this.tag = tag;\r\n    }\r\n    \r\n    public void setApikey(String apikey){\r\n      this.apikey = apikey;\r\n    }\r\n\r\n    public void setOffset(int offset){\r\n      this.offset = offset;\r\n    }\r\n\r\n    public void setLimit(int limit){\r\n      this.limit = limit;\r\n    }\r\n  \r\npublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n      \t//log.info(\"projectId : {}\", projectId);\r\n  \t\taddress=address.toLowerCase();\r\n        if(address.startsWith(\"0x\")){\r\n            address=address.substring(2);\r\n        }\r\n        switch(action) {\r\n          case \"balance\":\r\n                result = getBalance(address);\r\n                break;\r\n          case \"balancehistory\":\r\n                result = getTransactionList(address);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static String hex(byte[] bytes) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (byte aByte : bytes) {\r\n            result.append(String.format(\"%02x\", aByte));\r\n        }\r\n        return result.toString();\r\n    }\r\n  \r\n    private String toBigHex(String i){\r\n       return \"0x\"+new BigInteger(i).toString(16).toLowerCase();\r\n    }\r\n  \r\n  \tprivate String createResponse(String status,String message,String result) {\r\n        String res = \"{\\n\";\r\n        res += \"  \\\"status\\\": \" + 1 + \",\\n\";\r\n        res += \" \\\"message\\\" : \\\"\" + message + \"\\\",\\n\";\r\n        res += \" \\\"result\\\" : \" + result + \"\\n\";\r\n        res += \"}\";\r\n        log.info(\"response:{}\", res);\r\n        return res;\r\n    }\r\n  \r\n    private String getBalance(String hash) {\r\n        try {\r\n            Wallet wallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", hash).getResult();\r\n            return createResponse(\"1\",\"OK-Missing/Invalid API Key, rate limit of 1/5sec applied\", \"\\\"0x\"+new BigInteger(wallet.getBalance()).toString(16))+\"\\\"\";\r\n        } catch (Exception e) {\r\n            //e.printStackTrace();\r\n            return createResponse(\"0\",  \"Resource not found\",\"\");\r\n        }\r\n    }\r\n  \r\n    public String getTransactionList(String hash){\r\n         List<Transaction> transactions = crossStorageApi.find(defaultRepo, Transaction.class).by(\"fromHexHash\", hash).limit(offset+limit).getResults();\r\n         List<Transaction> transactionsTo = crossStorageApi.find(defaultRepo, Transaction.class).by(\"toHexHash\", hash).limit(offset+limit).getResults();\r\n         for(Transaction transac:transactionsTo){\r\n           //we reverse the amount for transfer received\r\n            BigInteger amount = new BigInteger(transac.getValue()).negate();\r\n            transac.setValue(amount.toString());\r\n          }\r\n      \t transactions.addAll(transactionsTo);\r\n         //we order by date descending\r\n         transactions = transactions.stream()\r\n\t\t\t      .sorted(Comparator.comparing(Transaction::getCreationDate).reversed())\r\n\t\t\t      .collect(Collectors.toList());\r\n         //check offset and limit\r\n         if(transactions.size()<=offset){\r\n          transactions = new ArrayList<>();\r\n         } else {\r\n          transactions = transactions.subList(offset,Math.min(offset+limit,transactions.size()));\r\n         }\r\n         String result=\"[\";\r\n      \t String sep=\"\";\r\n         for(Transaction transac:transactions){\r\n           result+=sep+\"{\";\r\n           result+=\"\\\"blockNumber\\\":\\\"\"+transac.getBlockNumber()+\"\\\",\";\r\n           result+=\"\\\"timeStamp\\\":\\\"\"+transac.getCreationDate()+\"\\\",\";\r\n           result+=\"\\\"hash\\\":\\\"0x\"+transac.getHexHash()+\"\\\",\";\r\n           result+=\"\\\"nonce\\\":\\\"\"+this.toBigHex(transac.getNonce())+\"\\\",\";\r\n           result+=\"\\\"blockHash\\\":\\\"\"+transac.getBlockHash()+\"\\\",\";\r\n           result+=\"\\\"transactionIndex\\\":\\\"\"+transac.getTransactionIndex()+\"\\\",\";\r\n           result+=\"\\\"from\\\":\\\"0x\"+transac.getFromHexHash()+\"\\\",\";\r\n           result+=\"\\\"to\\\":\\\"0x\"+transac.getToHexHash()+\"\\\",\";\r\n           result+=\"\\\"value\\\":\\\"0x\"+(new BigInteger(transac.getValue())).toString(16)+\"\\\",\";\r\n           if(transac.getData()!=null){\r\n             if(isJSONValid(transac.getData())){\r\n               result += \"\\\"data\\\": \" + transac.getData() + \",\\n\";\r\n             } else {\r\n               result += \"\\\"data\\\": \\\"\" + transac.getData() + \"\\\",\\n\";\r\n             }\r\n           }\r\n           result+=\"\\\"gas\\\":\\\"0\\\",\";\r\n           result+=\"\\\"gasPrice\\\":\\\"0x\"+transac.getGasPrice()+\"\\\",\";\r\n           result+=\"\\\"isError\\\":\\\"0\\\",\";\r\n           result+=\"\\\"txreceipt_status\\\":\\\"1\\\",\";\r\n           result+=\"\\\"input\\\":\\\"0x\\\",\\\"contractAddress\\\":\\\"\\\",\\\"cumulativeGasUsed\\\":\\\"\\\",\\\"gasUsed\\\":\\\"\\\",\\\"confirmations\\\":\\\"281736\\\"\";\r\n           result+=\"}\";\r\n           sep=\",\";\r\n         }\r\n         result+=\"]\";\r\n         return createResponse(\"1\",\"OK\",result);\r\n    }\r\n}\r\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ {
    "groupId" : "org.web3j",
    "artifactId" : "crypto",
    "version" : "4.8.9",
    "coordinates" : "org.web3j:crypto:4.8.9"
  } ],
  "importScriptInstances" : [ ]
}