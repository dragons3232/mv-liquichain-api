{"code":"io.liquichain.api.scann.EthScannScript","description":"etherscan service","inputs":[{"name":"module","type":"String"},{"name":"action","type":"String"},{"name":"address","type":"String"},{"name":"tag","type":"String"},{"name":"apikey","type":"String"}],"outputs":[{"name":"result","type":"String"}],"generateOutputs":false,"type":"JAVA","transactionType":"SAME","script":"package io.liquichain.api.scann;\r\n\r\nimport io.liquichain.core.BlockForgerScript;\r\n\r\nimport java.util.Map;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.customEntities.LiquichainApp;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.meveo.model.customEntities.CustomEntityInstance;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class EthScannScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(EthScannScript.class);\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n  \r\n    private String result;\r\n  \r\n    private String module;\r\n\tprivate String action;\r\n\tprivate String address;\r\n    private String tag;\r\n    private String apikey;\r\n\r\n  \r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n  \r\n    public void setModule(String module){\r\n      this.module = module;\r\n    }\r\n    \r\n    public void setAction(String action){\r\n      this.action = action;\r\n    }\r\n    \r\n    public void setAddress(String address){\r\n      this.address = address;\r\n    }\r\n    \r\n    public void setTag(String tag){\r\n      this.tag = tag;\r\n    }\r\n    \r\n    public void setApikey(String apikey){\r\n      this.apikey = apikey;\r\n    }\r\n  \r\npublic void execute(Map<String, Object> parameters) throws BusinessException {\r\n      \t//log.info(\"projectId : {}\", projectId);\r\n  \t\taddress=address.toLowerCase();\r\n        if(address.startsWith(\"0x\")){\r\n            address=address.substring(2);\r\n        }\r\n        switch(action) {\r\n          case \"balance\":\r\n                result = getBalance(address);\r\n                break;\r\n          case \"balancehistory\":\r\n                result = getTransactionList(address);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static String hex(byte[] bytes) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (byte aByte : bytes) {\r\n            result.append(String.format(\"%02x\", aByte));\r\n        }\r\n        return result.toString();\r\n    }\r\n  \r\n    private String toBigHex(String i){\r\n       return \"0x\"+new BigInteger(i).toString(16).toLowerCase();\r\n    }\r\n  \r\n  \tprivate String createResponse(String status,String message,String result) {\r\n        String res = \"{\\n\";\r\n        res += \"  \\\"status\\\": \" + 1 + \",\\n\";\r\n        res += \" \\\"message\\\" : \\\"\" + message + \"\\\",\\n\";\r\n        res += \" \\\"result\\\" : \" + result + \"\\n\";\r\n        res += \"}\";\r\n        log.info(\"response:{}\", res);\r\n        return res;\r\n    }\r\n  \r\n    private String getBalance(String hash) {\r\n        try {\r\n            Wallet wallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", hash).getResult();\r\n            return createResponse(\"1\",\"OK-Missing/Invalid API Key, rate limit of 1/5sec applied\", \"\\\"0x\"+new BigInteger(wallet.getBalance()).toString(16))+\"\\\"\";\r\n        } catch (Exception e) {\r\n            //e.printStackTrace();\r\n            return createResponse(\"0\",  \"Resource not found\",\"\");\r\n        }\r\n    }\r\n  \r\n    public String getTransactionList(String hash){\r\n         List<Transaction> transactions = crossStorageApi.find(defaultRepo, Transaction.class).by(\"fromHexHash\", hash).getResults();\r\n         List<Transaction> transactionsTo = crossStorageApi.find(defaultRepo, Transaction.class).by(\"toHexHash\", hash).getResults();\r\n      \t transactions.addAll(transactionsTo);\r\n         String result=\"[\";\r\n      \t String sep=\"\";\r\n         for(Transaction transac:transactions){\r\n           result+=sep+\"{\";\r\n           result+=\"\\\"blockNumber\\\":\\\"\"+transac.getBlockNumber()+\"\\\",\";\r\n           result+=\"\\\"timeStamp\\\":\\\"\"+transac.getCreationDate()+\"\\\",\";\r\n           result+=\"\\\"hash\\\":\\\"0x\"+transac.getHexHash()+\"\\\",\";\r\n           result+=\"\\\"nonce\\\":\\\"\"+this.toBigHex(transac.getNonce())+\"\\\",\";\r\n           result+=\"\\\"blockHash\\\":\\\"\"+transac.getBlockHash()+\"\\\",\";\r\n           result+=\"\\\"transactionIndex\\\":\\\"\"+transac.getTransactionIndex()+\"\\\",\";\r\n           result+=\"\\\"from\\\":\\\"0x\"+transac.getFromHexHash()+\"\\\",\";\r\n           result+=\"\\\"to\\\":\\\"0x\"+transac.getToHexHash()+\"\\\",\";\r\n           result+=\"\\\"value\\\":\\\"0x\"+(new BigInteger(transac.getValue())).toString(16)+\"\\\",\";\r\n           result+=\"\\\"gas\\\":\\\"0\\\",\";\r\n           result+=\"\\\"gasPrice\\\":\\\"0x\"+transac.getGasPrice()+\"\\\",\";\r\n           result+=\"\\\"isError\\\":\\\"0\\\",\";\r\n           result+=\"\\\"txreceipt_status\\\":\\\"1\\\",\";\r\n           result+=\"\\\"input\\\":\\\"0x\\\",\\\"contractAddress\\\":\\\"\\\",\\\"cumulativeGasUsed\\\":\\\"\\\",\\\"gasUsed\\\":\\\"\\\",\\\"confirmations\\\":\\\"281736\\\"\";\r\n           result+=\"}\";\r\n           sep=\",\";\r\n         }\r\n         result+=\"]\";\r\n         return createResponse(\"1\",\"OK-Missing/Invalid API Key, rate limit of 1/5sec applied\",result);\r\n    }\r\n}\r\n","executionRoles":[],"sourcingRoles":[],"mavenDependencies":[],"importScriptInstances":[{"code":"io.liquichain.core.BlockForgerScript","description":"Bock forging script","inputs":[],"outputs":[{"name":"lastBlock","type":"Block"}],"generateOutputs":false,"type":"JAVA","transactionType":"SAME","script":"package io.liquichain.core;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.time.Instant;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.stream.Collectors;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Block;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.cache.CustomFieldsCacheContainerProvider;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.admin.util.pagination.PaginationConfiguration;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.service.custom.CustomTableService;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.primefaces.model.SortOrder;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class BlockForgerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(BlockForgerScript.class);\r\n  \r\n    private static long chainId=76;\r\n\r\n    private int networkId = 7;\r\n\r\n    static public long blockHeight = 1662295;\r\n  \r\n    private Block parentBlock=null;\r\n    \r\n    private String exampleBlock = \"{\" +\r\n      \"\\\"difficulty\\\":\\\"0x5\\\",\" +\r\n      \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\r\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\" \r\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\r\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\r\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" +\r\n      \"\\\"number\\\":\\\"0x1b4\\\",\" +\r\n      \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\" + \r\n      \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" +\r\n      \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" +\r\n      \"\\\"size\\\":\\\"0x260\\\",\" +\r\n      \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\" +\r\n      \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" +\r\n      \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" +\r\n      \"\\\"transactions\\\":[\" + \"],\" + \r\n      \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \r\n      \"\\\"uncles\\\":[  \" + \"]}\";\r\n\r\n      \r\n\tprivate CustomFieldsCacheContainerProvider cetCache = getCDIBean(CustomFieldsCacheContainerProvider.class);\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n    private CustomTableService customTableService = getCDIBean(CustomTableService.class);\r\n    \r\n    private static PaginationConfiguration lastBlockPC = new PaginationConfiguration(\"blockNumber\",SortOrder.DESCENDING);\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    \r\n    private static List<Transaction> currentTransactions = new ArrayList<>();\r\n    private static List<Transaction> nextTransactions = new ArrayList<>();\r\n  \r\n    private static Instant nextBlockDate;\r\n    private static AtomicBoolean isForging = new AtomicBoolean(false);\r\n  \r\n    public static void addTransaction(Transaction t){\r\n      if(isForging.get()){\r\n          nextTransactions.add(t);\r\n      } else {\r\n          currentTransactions.add(t);\r\n      }\r\n    }\r\n  \r\n    public Block getLastBlock(){\r\n        Block result = null;\r\n        try{\r\n            log.info(\"query : \"+customTableService.getQuery(\"block\", lastBlockPC));\r\n        List<Map<String, Object>> res = crossStorageService.find(defaultRepo, cetCache.getCustomEntityTemplate(\"Block\"), lastBlockPC);\r\n        if(res.size()>0){\r\n            result = CEIUtils.deserialize(res.get(0), Block.class);\r\n            log.info(\"lastBlock number:{}\",result.getBlockNumber());\r\n        }\r\n        } catch(Exception e){\r\n          log.error(\"getLastBlock:{}\",e);\r\n        }\r\n        return result;\r\n    }\r\n  \r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n      //log.info(\"execute forging\");\r\n      if(parentBlock==null){\r\n      \tlog.info(\"retreive last block from chain\");\r\n        parentBlock = getLastBlock();\r\n      }\r\n      if(isForging.getAndSet(true)){\r\n         log.error(\"we are already forging\");\r\n         return;\r\n      } \r\n      if(currentTransactions.size()==0){\r\n        log.info(\"no transaction to forge\");\r\n        isForging.set(false);\r\n        return;\r\n      } else {\r\n        //log.info(\"forging {} transactions\",currentTransactions.size());\r\n        Map<String,Wallet> wallets = new HashMap<>();\r\n        List<Transaction> orderedTransactions = currentTransactions.stream().sorted((t1,t2)->(t1.getCreationDate().compareTo(t2.getCreationDate()))).collect(Collectors.toList());\r\n        \r\n        blockHeight=parentBlock.getBlockNumber()+1;\r\n        \r\n        String transactionHashes=\"\";\r\n        List<Transaction> invalidTransactions = new ArrayList<>();\r\n        for(Transaction t: currentTransactions){\r\n          log.info(\" transaction date : {}\",t.getCreationDate());\r\n          if(!wallets.containsKey(t.getFromHexHash())){\r\n            try{\r\n            \tWallet originWallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", t.getFromHexHash()).getResult();\r\n                log.info(\"add originWallet:{} {} to map\",originWallet.getHexHash(),originWallet.getBalance());\r\n                wallets.put(t.getFromHexHash(),originWallet);\r\n            } catch(Exception e){\r\n              log.info(\" cannot find origin wallet, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try {\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n          if(t.getBlockNumber() == null){\r\n            Wallet originWallet = wallets.get(t.getFromHexHash());\r\n          \tlog.info(\"originWallet 0x{} old balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n            BigInteger transacValue = new BigInteger(t.getValue());\r\n          \tif(new BigInteger(originWallet.getBalance()).compareTo(transacValue)>=0){\r\n                originWallet.setBalance(\"\"+new BigInteger(originWallet.getBalance()).add(transacValue.negate()));\r\n                try{\r\n            \t\tWallet destinationWallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", t.getToHexHash()).getResult();\r\n          \t\t\tlog.info(\"destinationWallet 0x{} old balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n                    destinationWallet.setBalance(\"\"+new BigInteger(destinationWallet.getBalance()).add(transacValue));\r\n          \t\t\tcrossStorageApi.createOrUpdate(defaultRepo, destinationWallet);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} new balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n          \t\t\ttransactionHashes+=t.getHexHash();\r\n                } catch(Exception e){\r\n              \t\tlog.info(\" cannot find destination wallet, set blockNumber to INVALID\");\r\n              \t\tt.setBlockNumber(\"INVALID\");\r\n              \t\ttry{\r\n\t\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n                    } catch(Exception ex){\r\n                \t\tex.printStackTrace();\r\n              \t\t}\r\n              \t\tinvalidTransactions.add(t);\r\n                }\r\n          \t} else {\r\n              log.info(\"insufficient balance, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try{\r\n              \tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n        }\r\n        currentTransactions.removeAll(invalidTransactions);\r\n        Block block =  new Block();\r\n        block.setCreationDate(Instant.now());\r\n        \r\n        //FIXME parent should not be null\r\n        block.setParentHash(parentBlock==null?\"\":parentBlock.getHash());\r\n        block.setSize((long)currentTransactions.size());\r\n        \r\n        //FIXME hash parent hash\r\n        block.setHash(Hash.sha3(transactionHashes).substring(2));\r\n        \r\n        block.setBlockNumber(blockHeight);\r\n        try{\r\n          crossStorageApi.createOrUpdate(defaultRepo, block);\r\n          long i=0;\r\n          for(Transaction t: currentTransactions){\r\n              Wallet originWallet = wallets.get(t.getFromHexHash());\r\n              log.info(\"originWallet 0x{} new balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n              crossStorageApi.createOrUpdate(defaultRepo, originWallet);\r\n              t.setBlockHash(block.getHash());\r\n              t.setBlockNumber(\"\"+block.getBlockNumber());\r\n              t.setTransactionIndex(i++);\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n          }\r\n\r\n          parentBlock=block;\r\n          currentTransactions = nextTransactions;\r\n          nextTransactions = new ArrayList<>();\r\n        } catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n        \r\n        isForging.set(false);\r\n      }\r\n    }\r\n  \r\n}","executionRoles":[],"sourcingRoles":[],"mavenDependencies":[],"importScriptInstances":[]}]}