{
  "code" : "io.liquichain.api.rpc.EthApiScript",
  "description" : "eth rpc api",
  "inputs" : [ ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.model.customEntities.LiquichainApp;\nimport org.meveo.model.customEntities.Transaction;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.web3j.abi.FunctionReturnDecoder;\nimport org.web3j.crypto.Hash;\nimport org.web3j.crypto.RawTransaction;\nimport org.web3j.crypto.Sign;\nimport org.web3j.crypto.SignedRawTransaction;\nimport org.web3j.crypto.TransactionDecoder;\nimport io.liquichain.core.BlockForgerScript;\n\npublic class EthApiScript extends Script {\n\n  private static final Logger log = LoggerFactory.getLogger(EthApiScript.class);\n\n  private long chainId = 76;\n\n  private String result;\n\n  private int networkId = 7;\n\n  private long blockHeight = 1662295;\n\n  private BigInteger balance = new BigInteger(\"999965000000000000000\");\n\n  private String exampleBlock = \"{\" + \"\\\"difficulty\\\":\\\"0x5\\\",\"\n      + \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\"\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\"\n      + \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\"\n      + \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" + \"\\\"number\\\":\\\"0x1b4\\\",\"\n      + \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\"\n      + \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\"\n      + \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" + \"\\\"size\\\":\\\"0x260\\\",\"\n      + \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\"\n      + \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" + \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" + \"\\\"transactions\\\":[\" + \"],\"\n      + \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\"\n      + \"\\\"uncles\\\":[  \" + \"]}\";\n\n  private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n  // {\n  // crossStorageApi = CDI.current().select(CrossStorageApi.class).get();\n  // }\n  private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n  // {\n  // repositoryService = CDI.current().select(RepositoryService.class).get();\n  // }\n  private Repository defaultRepo = repositoryService.findDefaultRepository();\n\n  //private String projectId;\n\n  public String getResult() {\n    return result;\n  }\n\n  static private Map<String, Object[]> transactionHooks = new HashMap<>();\n\n  public static boolean addTransactionHook(String regex, Script script) {\n    String key = regex+\":\"+script.getClass().getName();\n    log.info(\"addTransactionHook key:{}\",key);\n    boolean result = true;\n    result =!transactionHooks.containsKey(key);\n    if(result == true){\n      Pattern pattern = Pattern.compile(regex);\n      transactionHooks.put(key, new Object[]{pattern, script});\n    }\n    return result;\n  }\n\n  private void processTransactionHooks(SignedRawTransaction transaction,String transactionHash) {\n    try {\n      String data = new String(new BigInteger(transaction.getData(), 16).toByteArray());\n      log.info(\"try matching {} hooks\",transactionHooks.size());\n      transactionHooks.forEach((String key,Object[] tuple) -> {\n        log.info(\"try hook {} on {}\",key,data);\n        Pattern pattern = (Pattern)tuple[0];\n        Script script = (Script)tuple[1];\n        Matcher matcher = pattern.matcher(data);\n        if (matcher.find()) {\n          log.info(\" hook {} matched\",key);\n          Map<String, Object> context = new HashMap<>();\n          context.put(\"transaction\", transaction);\n          context.put(\"transactionHash\",transactionHash);\n          context.put(\"matcher\", matcher);\n          try {\n            script.execute(context);\n            if(context.containsKey(\"result\")){\n          \t\tlog.info(\" hook result:{} \",context.get(\"result\"));\n            }\n          } catch (Exception e) {\n            log.error(\"error while invoking transaction hook {}\", script, e);\n          }\n        } else { \n          log.info(\" hook {} matched\",key);\n        }\n      });\n      if (data.contains(\"orderId\")) {\n        log.info(\"detected orderId:{}\", data);\n      }\n    } catch (Exception ex) {\n      log.info(\"error while detecting order:{}\", ex);\n    }\n  }\n\n  @Override\n  public void execute(Map<String, Object> parameters) throws BusinessException {\n    // log.info(\"projectId : {}\", projectId);\n    String method = \"\" + parameters.get(\"method\");\n    log.info(\"json rpc: {}, parameters:{}\", method, parameters);\n    String requestId = \"\" + parameters.get(\"id\");\n    switch (method) {\n      case \"eth_call\":\n        log.info(\"params={}\", parameters.get(\"params\"));\n        ArrayList<Object> paramscall = (ArrayList<Object>) parameters.get(\"params\");\n        Object hashcall = paramscall.get(0);\n        result = createResponse(requestId, \"0x\");\n        break;\n      case \"eth_chainId\":\n        result = createResponse(requestId, \"0x4c\");\n        break;\n      case \"web3_clientVersion\":\n        result = createResponse(requestId, \"liquichainCentral\");\n        break;\n      case \"net_version\":\n        result = createResponse(requestId, \"\" + networkId);\n        break;\n      case \"eth_blockNumber\":\n        blockHeight = BlockForgerScript.blockHeight;\n        result = createResponse(requestId, \"0x\" + Long.toHexString(blockHeight));\n        break;\n      case \"eth_getBalance\":\n        log.info(\"params={}\", parameters.get(\"params\"));\n        ArrayList<String> params = (ArrayList<String>) parameters.get(\"params\");\n        String hash = params.get(0).toLowerCase();\n        if (hash.startsWith(\"0x\")) {\n          hash = hash.substring(2);\n        }\n        result = getBalance(requestId, hash);\n        break;\n      case \"eth_getTransactionCount\":\n        log.info(\"params={}\", parameters.get(\"params\"));\n        ArrayList<String> paramsc = (ArrayList<String>) parameters.get(\"params\");\n        String hashc = paramsc.get(0).toLowerCase();\n        if (hashc.startsWith(\"0x\")) {\n          hashc = hashc.substring(2);\n        }\n        result = getTransactionCount(requestId, hashc);\n        break;\n      case \"eth_getBlockByNumber\":\n        result = createResponse(requestId, exampleBlock);\n        break;\n      case \"eth_estimateGas\":\n        result = createResponse(requestId, \"0x0\");\n        break;\n      case \"eth_gasPrice\":\n        result = createResponse(requestId, \"0x0\");\n        break;\n      case \"eth_getCode\":\n        ArrayList<String> paramsco = (ArrayList<String>) parameters.get(\"params\");\n        String hashco = paramsco.get(0).toLowerCase();\n        result = getCode(requestId, hashco);\n        break;\n      case \"eth_sendRawTransaction\":\n        log.info(\"received transaction : params={}\", parameters.get(\"params\"));\n        ArrayList<String> params2 = (ArrayList<String>) parameters.get(\"params\");\n        String transacEncoded = params2.get(0);\n        result = processTransaction(requestId, transacEncoded);\n        break;\n      case \"eth_getTransactionByHash\":\n        ArrayList<String> params3 = (ArrayList<String>) parameters.get(\"params\");\n        String hash2 = params3.get(0).toLowerCase();\n        result = getTransactionByHash(requestId, hash2);\n        break;\n      case \"wallet_creation\":\n        ArrayList<String> params4 = (ArrayList<String>) parameters.get(\"params\");\n        String name = params4.get(0);\n        String walletHash = params4.get(1).toLowerCase();\n        if (walletHash.startsWith(\"0x\")) {\n          walletHash = walletHash.substring(2);\n        }\n        String accountHash = params4.get(2).toLowerCase();\n        if (accountHash.startsWith(\"0x\")) {\n          accountHash = accountHash.substring(2);\n        }\n        String walletPublicInfo = params4.get(3);\n        result = createWallet(requestId, \"licoin\", name, walletHash, accountHash, walletPublicInfo);\n        break;\n      case \"wallet_update\":\n        ArrayList<String> params5 = (ArrayList<String>) parameters.get(\"params\");\n        String uname = params5.get(0);\n        String uwalletHash = params5.get(1).toLowerCase();\n        if (uwalletHash.startsWith(\"0x\")) {\n          uwalletHash = uwalletHash.substring(2);\n        }\n        String walletPublicInfo2 = params5.get(2);\n        String signature = params5.get(3);\n        result = updateWallet(requestId, \"licoin\", uname, uwalletHash, walletPublicInfo2, signature);\n        break;\n      case \"wallet_info\":\n        ArrayList<String> params6 = (ArrayList<String>) parameters.get(\"params\");\n        String iwalletHash = params6.get(0).toLowerCase();\n        if (iwalletHash.startsWith(\"0x\")) {\n          iwalletHash = iwalletHash.substring(2);\n        }\n        result = getWalletInfo(requestId, \"licoin\", iwalletHash);\n        break;\n      case \"wallet_report\":\n        ArrayList<String> params7 = (ArrayList<String>) parameters.get(\"params\");\n        String reportedWalletHash = params7.get(0).toLowerCase();\n        String signature2 = params7.get(1);\n        result = createResponse(requestId, \"wallet reported\");\n        break;\n    }\n  }\n\n  public static String hex(byte[] bytes) {\n    StringBuilder result = new StringBuilder();\n    for (byte aByte : bytes) {\n      result.append(String.format(\"%02x\", aByte));\n    }\n    return result.toString().toLowerCase();\n  }\n\n  private String toBigHex(String i) {\n    return \"0x\" + new BigInteger(i).toString(16);\n  }\n\n  private String getTransactionByHash(String requestId, String hash) {\n    try {\n      log.info(\"lookup transaction hexHash={}\", hash);\n\n      if (hash.startsWith(\"0x\")) {\n        hash = hash.substring(2);\n      }\n      Transaction transac = crossStorageApi.find(defaultRepo, Transaction.class).by(\"hexHash\", hash).getResult();\n      String result = \"{\\n\";\n      result += \"\\\"blockHash\\\": \\\"0x\" + transac.getBlockHash() + \"\\\",\\n\";\n      result += \"\\\"blockNumber\\\": \\\"\" + toBigHex(transac.getBlockNumber()) + \"\\\",\\n\";\n      result += \"\\\"from\\\": \\\"0x\" + transac.getFromHexHash() + \"\\\",\\n\";\n      result += \"\\\"gas\\\": \\\"0x\" + toBigHex(transac.getGasLimit()) + \"\\\",\\n\";\n      result += \"\\\"gasPrice\\\": \\\"0x\" + toBigHex(transac.getGasPrice()) + \"\\\",\\n\";\n      result += \"\\\"hash\\\": \\\"\" + hash + \"\\\",\\n\";\n      result += \"\\\"input\\\": \\\"\\\",\\n\";\n      result += \"\\\"nonce\\\": \\\"\" + toBigHex(transac.getNonce()) + \"\\\",\\n\";\n      result += \"\\\"r\\\": \\\"\" + transac.getR() + \"\\\",\\n\";\n      result += \"\\\"s\\\": \\\"\" + transac.getS() + \"\\\",\\n\";\n      result += \"\\\"to\\\": \\\"0x\" + transac.getToHexHash() + \"\\\",\\n\";\n      result += \"\\\"transactionIndex\\\": \\\"0x\" + toBigHex(transac.getTransactionIndex() + \"\") + \"\\\",\";\n      result += \"\\\"v\\\": \\\"\" + transac.getV() + \"\\\",\";\n      result += \"\\\"value\\\": \\\"\" + toBigHex(transac.getValue()) + \"\\\"\\n\";\n      result += \"}\";\n      log.info(\"res={}\" + result);\n      return createResponse(requestId, result);\n    } catch (Exception e) {\n      // e.printStackTrace();\n      return createErrorResponse(requestId, \"-32001\", \"Resource not found\");\n    }\n  }\n\n  private String processTransaction(String requestId, String hexTransactionData) {\n    String result = \"0x0\";\n    String hash = Hash.sha3(hexTransactionData).toLowerCase();\n    Transaction existingTransaction = null;\n    try {\n      existingTransaction = crossStorageApi.find(defaultRepo, Transaction.class).by(\"hexHash\", hash.substring(2))\n          .getResult();\n    } catch (Exception e) {\n    }\n    if (existingTransaction != null) {\n      return createErrorResponse(requestId, \"-32001\", \"transaction already exists hexHash:\" + hash.substring(2));\n    }\n    RawTransaction t = TransactionDecoder.decode(hexTransactionData);\n    log.info(\"nonce:{} to:{} , value:{}\", t.getNonce(), t.getTo(), t.getValue());\n    if (t instanceof SignedRawTransaction) {\n      SignedRawTransaction signedResult = (SignedRawTransaction) t;\n      signedResult.getData();\n      Sign.SignatureData signatureData = signedResult.getSignatureData();\n      // byte[] encodedTransaction = TransactionEncoder.encode(t);\n      try {\n        log.info(\"from:{} chainedId:{}\", signedResult.getFrom(), signedResult.getChainId());\n        Transaction transac = new Transaction();\n        transac.setHexHash(hash.substring(2).toLowerCase());\n        transac.setFromHexHash(signedResult.getFrom().substring(2).toLowerCase());\n        transac.setToHexHash(t.getTo().substring(2).toLowerCase());\n        transac.setNonce(\"\" + t.getNonce());\n        transac.setGasPrice(\"\" + t.getGasPrice());\n        transac.setGasLimit(\"\" + t.getGasLimit());\n        transac.setValue(\"\" + t.getValue());\n        if(t.getData()==null || t.getData().isEmpty()){\n          transac.setData(\"{\\\"type\\\":\\\"transfer\\\"}\");\n        } else {\n          transac.setData(\"\" + t.getData());\n        }\n        transac.setSignedHash(hexTransactionData);\n        transac.setCreationDate(java.time.Instant.now());\n        transac.setV(hex(signatureData.getV()));\n        transac.setS(hex(signatureData.getS()));\n        transac.setR(hex(signatureData.getR()));\n        log.info(\"transac:{}\", transac);\n        String uuid = crossStorageApi.createOrUpdate(defaultRepo, transac);\n        transferValue(transac, t.getValue());\n        result = hash;\n        log.info(\"created transaction with uuid:{}\", uuid);\n        if (t.getData() != null && t.getData().length() > 0) {\n          processTransactionHooks(signedResult,transac.getHexHash());\n        }\n      } catch (Exception e) {\n        // e.printStackTrace();\n        return createErrorResponse(requestId, \"-32001\", e.getMessage());\n      }\n    }\n    return createResponse(requestId, result);\n  }\n\n  private String createResponse(String requestId, String result) {\n    String res = \"{\\n\";\n    res += \"  \\\"id\\\": \" + requestId + \",\\n\";\n    res += \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\";\n    if (result.startsWith(\"{\")) {\n      res += \"  \\\"result\\\": \" + result + \"\\n\";\n    } else {\n      res += \"  \\\"result\\\": \\\"\" + result + \"\\\"\\n\";\n    }\n    res += \"}\";\n    // log.info(\"res:{}\", res);\n    return res;\n  }\n\n  private void transferValue(Transaction transac, BigInteger value) throws Exception {\n    String message = \"transfer error\";\n    try {\n      message = \"cannot find origin wallet\";\n      Wallet originWallet = crossStorageApi.find(defaultRepo, transac.getFromHexHash(), Wallet.class);\n      message = \"cannot find destination wallet\";\n      Wallet destinationWallet = crossStorageApi.find(defaultRepo, transac.getToHexHash(), Wallet.class);\n      message = \"insufficient balance\";\n      BigInteger originBalance = new BigInteger(originWallet.getBalance());\n      log.info(\"originWallet 0x{} old balance:{}\", transac.getFromHexHash(), originWallet.getBalance());\n      if (value.compareTo(originBalance) <= 0) {\n        BlockForgerScript.addTransaction(transac);\n      } else {\n        throw new RuntimeException(\"insufficient balance\");\n      }\n    } catch (Exception e) {\n      throw new Exception(message);\n    }\n  }\n\n  private String createErrorResponse(String requestId, String errorCode, String message) {\n    String res = \"{\\n\";\n    res += \"  \\\"id\\\": \" + requestId + \",\\n\";\n    res += \"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\";\n    res += \"  \\\"error\\\": { \\\"code\\\" : \" + errorCode + \" , \\\"message\\\" : \\\"\" + message + \"\\\"}\\n\";\n    res += \"}\";\n    // log.info(\"err:{}\", res);\n    return res;\n  }\n\n  private String getTransactionCount(String requestId, String hash) {\n    try {\n      int nbTransaction = (crossStorageApi.find(defaultRepo, Transaction.class).by(\"fromHexHash\", hash.toLowerCase())\n          .getResults()).size();\n      return createResponse(requestId, \"0x\" + new BigInteger(nbTransaction + \"\").toString(16));\n    } catch (Exception e) {\n      // e.printStackTrace();\n      return createResponse(requestId, \"0x0\");\n    }\n  }\n\n  private String getCode(String requestId, String hash) {\n    try {\n      Wallet wallet = crossStorageApi.find(defaultRepo, hash.substring(2).toLowerCase(), Wallet.class);\n      log.info(\"getCode wallet.app.uuid={}\", wallet.getApplication().getUuid());\n      // LiquichainApp app = crossStorageApi.find(defaultRepo, LiquichainApp.class);\n      return createResponse(requestId, \"0x\" + wallet.getApplication().getUuid());\n    } catch (Exception e) {\n      // e.printStackTrace();\n      return createErrorResponse(requestId, \"-32001\", \"Address not found\");\n    }\n  }\n\n  private String getBalance(String requestId, String hash) {\n    try {\n      Wallet wallet = crossStorageApi.find(defaultRepo, hash.toLowerCase(), Wallet.class);\n      return createResponse(requestId, \"0x\" + new BigInteger(wallet.getBalance()).toString(16));\n    } catch (Exception e) {\n      // e.printStackTrace();\n      return createErrorResponse(requestId, \"-32001\", \"Resource not found\");\n    }\n  }\n\n  public String createWallet(String requestId, String appName, String name, String walletHash, String accountHash,\n      String publicInfo) {\n    Wallet wallet = null;\n    try {\n      wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n    } catch (Exception e) {\n    }\n    if (wallet != null) {\n      return createErrorResponse(requestId, \"-32001\", \"Wallet already exists\");\n    } else {\n      wallet = new Wallet();\n    }\n    try {\n      LiquichainApp app = crossStorageApi.find(defaultRepo, LiquichainApp.class).by(\"name\", appName).getResult();\n      wallet.setUuid(walletHash.toLowerCase());\n      wallet.setName(name);\n      wallet.setAccountHash(accountHash.toLowerCase());\n      wallet.setPublicInfo(publicInfo);\n      wallet.setBalance(\"0\");\n      wallet.setApplication(app);\n      crossStorageApi.createOrUpdate(defaultRepo, wallet);\n      return createResponse(requestId, walletHash.toLowerCase());\n    } catch (Exception ex) {\n      return createErrorResponse(requestId, \"-32001\", \"Cannot find application \" + appName);\n    }\n\n  }\n\n  public String updateWallet(String requestId, String appName, String name, String walletHash, String publicInfo,\n      String signature) {\n    Wallet wallet = null;\n    try {\n      wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n    } catch (Exception e) {\n    }\n    if (wallet == null) {\n      return createErrorResponse(requestId, \"-32001\", \"Unkown Wallet\");\n    }\n    try {\n      wallet.setName(name);\n      wallet.setPublicInfo(publicInfo);\n      crossStorageApi.createOrUpdate(defaultRepo, wallet);\n      return createResponse(requestId, name);\n    } catch (Exception ex) {\n      return createErrorResponse(requestId, \"-32001\", \"Cannot update wallet \" + ex.getMessage());\n    }\n\n  }\n\n  public String getWalletInfo(String requestId, String appName, String walletHash) {\n    Wallet wallet = null;\n    try {\n      wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n    } catch (Exception e) {\n    }\n    if (wallet == null) {\n      return createErrorResponse(requestId, \"-32001\", \"Unkown Wallet\");\n    }\n    String response = \"{\\n\";\n    response += \"\\\"name\\\":\\\"\" + wallet.getName() + \"\\\"\";\n    if (wallet.getPublicInfo() != null) {\n      response += \",\\n\\\"publicInfo\\\":\" + wallet.getPublicInfo() + \"\";\n    }\n    response += \"\\n}\";\n    return createResponse(requestId, response);\n  }\n\n // public void setProjectId(String projectId) {\n   // this.projectId = projectId;\n  //}\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ {
    "groupId" : "org.web3j",
    "artifactId" : "crypto",
    "version" : "4.8.9",
    "coordinates" : "org.web3j:crypto:4.8.9"
  } ],
  "importScriptInstances" : [ {
    "code" : "io.liquichain.core.BlockForgerScript",
    "description" : "Bock forging script",
    "inputs" : [ ],
    "outputs" : [ {
      "name" : "lastBlock",
      "type" : "Block"
    } ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package io.liquichain.core;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.time.Instant;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.stream.Collectors;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Block;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.cache.CustomFieldsCacheContainerProvider;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.admin.util.pagination.PaginationConfiguration;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.service.custom.CustomTableService;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.primefaces.model.SortOrder;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class BlockForgerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(BlockForgerScript.class);\r\n  \r\n    private static long chainId=76;\r\n\r\n    private int networkId = 7;\r\n\r\n    static public long blockHeight = 1;\r\n  \r\n    private Block parentBlock=null;\r\n    \r\n    private String exampleBlock = \"{\" +\r\n      \"\\\"difficulty\\\":\\\"0x5\\\",\" +\r\n      \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\r\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\" \r\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\r\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\r\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" +\r\n      \"\\\"number\\\":\\\"0x1b4\\\",\" +\r\n      \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\" + \r\n      \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" +\r\n      \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" +\r\n      \"\\\"size\\\":\\\"0x260\\\",\" +\r\n      \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\" +\r\n      \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" +\r\n      \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" +\r\n      \"\\\"transactions\\\":[\" + \"],\" + \r\n      \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \r\n      \"\\\"uncles\\\":[  \" + \"]}\";\r\n\r\n      \r\n\tprivate CustomFieldsCacheContainerProvider cetCache = getCDIBean(CustomFieldsCacheContainerProvider.class);\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n    private CustomTableService customTableService = getCDIBean(CustomTableService.class);\r\n    \r\n    private static PaginationConfiguration lastBlockPC = new PaginationConfiguration(\"blockNumber\",SortOrder.DESCENDING);\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    \r\n    private static List<Transaction> currentTransactions = new ArrayList<>();\r\n    private static List<Transaction> nextTransactions = new ArrayList<>();\r\n  \r\n    private static Instant nextBlockDate;\r\n    private static AtomicBoolean isForging = new AtomicBoolean(false);\r\n  \r\n    public static void addTransaction(Transaction t){\r\n      if(isForging.get()){\r\n          nextTransactions.add(t);\r\n      } else {\r\n          currentTransactions.add(t);\r\n      }\r\n    }\r\n  \r\n    public Block getLastBlock(){\r\n        Block result = null;\r\n        try{\r\n            //log.info(\"query : \"+customTableService.getQuery(\"block\", lastBlockPC));\r\n        List<Map<String, Object>> res = crossStorageService.find(defaultRepo, cetCache.getCustomEntityTemplate(\"Block\"), lastBlockPC);\r\n        if(res.size()>0){\r\n            result = CEIUtils.deserialize(res.get(0), Block.class);\r\n            //log.info(\"lastBlock number:{}\",result.getBlockNumber());\r\n        }\r\n        } catch(Exception e){\r\n          log.error(\"getLastBlock:{}\",e);\r\n        }\r\n        return result;\r\n    }\r\n  \r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n      //log.info(\"execute forging\");\r\n      if(parentBlock==null){\r\n      \t//log.info(\"retreive last block from chain\");\r\n        parentBlock = getLastBlock();\r\n      }\r\n      if(isForging.getAndSet(true)){\r\n         log.error(\"we are already forging\");\r\n         return;\r\n      } \r\n      if(currentTransactions.size()==0){\r\n        //log.info(\"no transaction to forge\");\r\n        blockHeight=parentBlock.getBlockNumber();\r\n        isForging.set(false);\r\n        return;\r\n      } else {\r\n        log.info(\"forging {} transactions\",currentTransactions.size());\r\n        Map<String,Wallet> wallets = new HashMap<>();\r\n        List<Transaction> orderedTransactions = currentTransactions.stream().sorted((t1,t2)->(t1.getCreationDate().compareTo(t2.getCreationDate()))).collect(Collectors.toList());\r\n        \r\n        blockHeight=parentBlock.getBlockNumber()+1;\r\n        \r\n        String transactionHashes=\"\";\r\n        List<Transaction> invalidTransactions = new ArrayList<>();\r\n        for(Transaction t: currentTransactions){\r\n          log.info(\" transaction date : {}\",t.getCreationDate());\r\n          if(!wallets.containsKey(t.getFromHexHash())){\r\n            try{\r\n            \tWallet originWallet = crossStorageApi.find(defaultRepo,t.getFromHexHash(), Wallet.class);\r\n                log.info(\"add originWallet:{} {} to map\",originWallet.getUuid(),originWallet.getBalance());\r\n                wallets.put(t.getFromHexHash(),originWallet);\r\n            } catch(Exception e){\r\n              log.info(\" cannot find origin wallet, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try {\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n          if(t.getBlockNumber() == null){\r\n            Wallet originWallet = wallets.get(t.getFromHexHash());\r\n          \tlog.info(\"originWallet 0x{} old balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n            BigInteger transacValue = new BigInteger(t.getValue());\r\n          \tif(new BigInteger(originWallet.getBalance()).compareTo(transacValue)>=0){\r\n                originWallet.setBalance(\"\"+new BigInteger(originWallet.getBalance()).add(transacValue.negate()));\r\n                try{\r\n            \t\tWallet destinationWallet = crossStorageApi.find(defaultRepo,t.getToHexHash(), Wallet.class);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} old balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n                    destinationWallet.setBalance(\"\"+new BigInteger(destinationWallet.getBalance()).add(transacValue));\r\n          \t\t\tcrossStorageApi.createOrUpdate(defaultRepo, destinationWallet);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} new balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n          \t\t\ttransactionHashes+=t.getHexHash();\r\n                } catch(Exception e){\r\n              \t\tlog.info(\" cannot find destination wallet, set blockNumber to INVALID\");\r\n              \t\tt.setBlockNumber(\"INVALID\");\r\n              \t\ttry{\r\n\t\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n                    } catch(Exception ex){\r\n                \t\tex.printStackTrace();\r\n              \t\t}\r\n              \t\tinvalidTransactions.add(t);\r\n                }\r\n          \t} else {\r\n              log.info(\"insufficient balance, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try{\r\n              \tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n        }\r\n        currentTransactions.removeAll(invalidTransactions);\r\n        Block block =  new Block();\r\n        block.setCreationDate(Instant.now());\r\n        \r\n        //FIXME parent should not be null\r\n        block.setParentHash(parentBlock==null?\"\":parentBlock.getHash());\r\n        block.setSize((long)currentTransactions.size());\r\n        \r\n        //FIXME hash parent hash\r\n        block.setHash(Hash.sha3(transactionHashes).substring(2));\r\n        \r\n        block.setBlockNumber(blockHeight);\r\n        try{\r\n          crossStorageApi.createOrUpdate(defaultRepo, block);\r\n          long i=0;\r\n          for(Transaction t: currentTransactions){\r\n              Wallet originWallet = wallets.get(t.getFromHexHash());\r\n              log.info(\"originWallet 0x{} new balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n              crossStorageApi.createOrUpdate(defaultRepo, originWallet);\r\n              t.setBlockHash(block.getHash());\r\n              t.setBlockNumber(\"\"+block.getBlockNumber());\r\n              t.setTransactionIndex(i++);\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n          }\r\n\r\n          parentBlock=block;\r\n          currentTransactions = nextTransactions;\r\n          nextTransactions = new ArrayList<>();\r\n        } catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n        \r\n        isForging.set(false);\r\n      }\r\n    }\r\n  \r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ {
      "groupId" : "org.web3j",
      "artifactId" : "crypto",
      "version" : "4.8.9",
      "coordinates" : "org.web3j:crypto:4.8.9"
    } ],
    "importScriptInstances" : [ ]
  } ]
}